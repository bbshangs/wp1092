type Query {
  users(name: String): [User!]!
  messages(sender: ID, body: String): [Message!]!
  chatbox(name: String!): ChatBox!
}
type Mutation {
  createUser(data: CreateUserInput!): User!
  createMessage(data: CreateMessageInput!): Message!
  createChatBox(data: CreateChatBoxInput!): ChatBox!
  addMessageToChatBox(data: AddMessageToChatBoxInput!): ChatBox!
}
type Subscription {
  chatbox(name: String!): ChatboxSubscriptionPayload!
}

input CreateUserInput {
  name: String!
}

input CreateMessageInput {
  sender: String!
  body: String!
}

input CreateChatBoxInput {
  name1: String!
  name2: String!
}

input AddMessageToChatBoxInput {
  messageID: ID!
  chatboxName: String!
}

type User {
  id: ID!
  name: String!
}

type Message {
  id: ID!
  sender: User!
  body: String!
}

type ChatBox {
  id: ID!
  name: String!
  messages: [Message!]
}

enum MutationType {
  UPDATED
}

type ChatboxSubscriptionPayload {
  mutation: MutationType!
  data: ChatBox!
}
